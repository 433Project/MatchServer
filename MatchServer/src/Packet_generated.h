// automatically generated by the FlatBuffers compiler, do not modify

#ifndef FLATBUFFERS_GENERATED_PACKET_FB_H_
#define FLATBUFFERS_GENERATED_PACKET_FB_H_

#include "flatbuffers/flatbuffers.h"

namespace fb {

	struct Body;

	enum COMMAND {
		COMMAND_HEALTH_CHECK_REQUEST = 0,
		COMMAND_HEALTH_CHECK_RESPONSE = 1,
		COMMAND_NOTI_MATCH_REQUEST = 10,
		COMMAND_NOTI_MATCH_SUCCESS = 11,
		COMMAND_MATCH_REQUEST = 12,
		COMMAND_MATCH_RESPONSE = 13,
		COMMAND_MSLIST_REQUEST = 30,
		COMMAND_MSLIST_RESPONSE = 31,
		COMMAND_MS_ID = 32,
		COMMAND_ROOM_CREATE_REQUEST = 40,
		COMMAND_ROOM_CREATE_RESPONSE = 41,
		COMMAND_ROOM_JOIN_REQUEST = 50,
		COMMAND_ROOM_JOIN_RESPONSE = 51,
		COMMAND_GAME_START = 52,
		COMMAND_GAME_END = 53,
		COMMAND_PG_START = 60,
		COMMAND_PG_END = 61,
		COMMAND_PG_DUMMY = 62,
		COMMAND_MIN = COMMAND_HEALTH_CHECK_REQUEST,
		COMMAND_MAX = COMMAND_PG_DUMMY
	};

	inline const char **EnumNamesCOMMAND() {
		static const char *names[] = { "HEALTH_CHECK_REQUEST", "HEALTH_CHECK_RESPONSE", "", "", "", "", "", "", "", "", "NOTI_MATCH_REQUEST", "NOTI_MATCH_SUCCESS", "MATCH_REQUEST", "MATCH_RESPONSE", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "MSLIST_REQUEST", "MSLIST_RESPONSE", "MS_ID", "", "", "", "", "", "", "", "ROOM_CREATE_REQUEST", "ROOM_CREATE_RESPONSE", "", "", "", "", "", "", "", "", "ROOM_JOIN_REQUEST", "ROOM_JOIN_RESPONSE", "GAME_START", "GAME_END", "", "", "", "", "", "", "PG_START", "PG_END", "PG_DUMMY", nullptr };
		return names;
	}

	inline const char *EnumNameCOMMAND(COMMAND e) { return EnumNamesCOMMAND()[static_cast<int>(e)]; }

	enum STATUS {
		STATUS_SUCCESS = 0,
		STATUS_FAIL = 1,
		STATUS_NONE = 2,
		STATUS_MIN = STATUS_SUCCESS,
		STATUS_MAX = STATUS_NONE
	};

	inline const char **EnumNamesSTATUS() {
		static const char *names[] = { "SUCCESS", "FAIL", "NONE", nullptr };
		return names;
	}

	inline const char *EnumNameSTATUS(STATUS e) { return EnumNamesSTATUS()[static_cast<int>(e)]; }

	struct Body FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
		enum {
			VT_CMD = 4,
			VT_STATUS = 6,
			VT_DATA1 = 8,
			VT_DATA2 = 10
		};
		COMMAND cmd() const { return static_cast<COMMAND>(GetField<int32_t>(VT_CMD, 0)); }
		STATUS status() const { return static_cast<STATUS>(GetField<int32_t>(VT_STATUS, 0)); }
		const flatbuffers::String *data1() const { return GetPointer<const flatbuffers::String *>(VT_DATA1); }
		const flatbuffers::String *data2() const { return GetPointer<const flatbuffers::String *>(VT_DATA2); }
		bool Verify(flatbuffers::Verifier &verifier) const {
			return VerifyTableStart(verifier) &&
				VerifyField<int32_t>(verifier, VT_CMD) &&
				VerifyField<int32_t>(verifier, VT_STATUS) &&
				VerifyField<flatbuffers::uoffset_t>(verifier, VT_DATA1) &&
				verifier.Verify(data1()) &&
				VerifyField<flatbuffers::uoffset_t>(verifier, VT_DATA2) &&
				verifier.Verify(data2()) &&
				verifier.EndTable();
		}
	};

	struct BodyBuilder {
		flatbuffers::FlatBufferBuilder &fbb_;
		flatbuffers::uoffset_t start_;
		void add_cmd(COMMAND cmd) { fbb_.AddElement<int32_t>(Body::VT_CMD, static_cast<int32_t>(cmd), 0); }
		void add_status(STATUS status) { fbb_.AddElement<int32_t>(Body::VT_STATUS, static_cast<int32_t>(status), 0); }
		void add_data1(flatbuffers::Offset<flatbuffers::String> data1) { fbb_.AddOffset(Body::VT_DATA1, data1); }
		void add_data2(flatbuffers::Offset<flatbuffers::String> data2) { fbb_.AddOffset(Body::VT_DATA2, data2); }
		BodyBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
		BodyBuilder &operator=(const BodyBuilder &);
		flatbuffers::Offset<Body> Finish() {
			auto o = flatbuffers::Offset<Body>(fbb_.EndTable(start_, 4));
			return o;
		}
	};

	inline flatbuffers::Offset<Body> CreateBody(flatbuffers::FlatBufferBuilder &_fbb,
		COMMAND cmd = COMMAND_HEALTH_CHECK_REQUEST,
		STATUS status = STATUS_SUCCESS,
		flatbuffers::Offset<flatbuffers::String> data1 = 0,
		flatbuffers::Offset<flatbuffers::String> data2 = 0) {
		BodyBuilder builder_(_fbb);
		builder_.add_data2(data2);
		builder_.add_data1(data1);
		builder_.add_status(status);
		builder_.add_cmd(cmd);
		return builder_.Finish();
	}

	inline flatbuffers::Offset<Body> CreateBodyDirect(flatbuffers::FlatBufferBuilder &_fbb,
		COMMAND cmd = COMMAND_HEALTH_CHECK_REQUEST,
		STATUS status = STATUS_SUCCESS,
		const char *data1 = nullptr,
		const char *data2 = nullptr) {
		return CreateBody(_fbb, cmd, status, data1 ? _fbb.CreateString(data1) : 0, data2 ? _fbb.CreateString(data2) : 0);
	}

	inline const fb::Body *GetBody(const void *buf) { return flatbuffers::GetRoot<fb::Body>(buf); }

	inline bool VerifyBodyBuffer(flatbuffers::Verifier &verifier) { return verifier.VerifyBuffer<fb::Body>(nullptr); }

	inline void FinishBodyBuffer(flatbuffers::FlatBufferBuilder &fbb, flatbuffers::Offset<fb::Body> root) { fbb.Finish(root); }

}  // namespace fb

#endif  // FLATBUFFERS_GENERATED_PACKET_FB_H_
